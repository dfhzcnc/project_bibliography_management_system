package hello;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

//part for mysql
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import hello.User;
import hello.UserRepository;

   
@Controller
public class GreetingController {

    public static User Previous=new User("empty", "empty", 0, "empty");
    
    @RequestMapping("/greeting")
    public String greeting(@RequestParam(value="name", required=false, defaultValue="World") String name, Model model) {
        model.addAttribute("name", name);
        return "greeting";
    }
    
    @RequestMapping("/result")
	public String showAllPosts(@RequestParam(value="deleteID", required=false, defaultValue="empty") String deleteID,
							@RequestParam(value="author", required=false, defaultValue="specialcase") String author,
                            @RequestParam(value="title", required=false) String title,
                            @RequestParam(value="year", required=false) Integer year,
                            @RequestParam(value="journal", required=false) String journal, Model model) {
        User n = new User(author, title, year, journal);
        
        //Handles Delete & Redirect
        if(author.equals("specialcase")){
        	if(!deleteID.equals("empty")){
        	userRepository.delete(Integer.parseInt(deleteID));
        	}
        	model.addAttribute("posts", userRepository.findAll());
        	return "result";
        }	
        	
        //eliminate duplicate entry & add new to repo	
        if(Previous.getAuthor()=="empty" || !(Previous.getAuthor().equals(author)&&
        Previous.getTitle().equals(title)&&Previous.getYear().equals(year)&&Previous.getJournal().equals(journal))){
        	
        	Previous.setAuthor(author);
			Previous.setTitle(title);
			Previous.setYear(year);
			Previous.setJournal(journal);
			n.setAuthor(author);
			n.setTitle(title);
			n.setYear(year);
			n.setJournal(journal);
			userRepository.save(n);
			model.addAttribute("posts", userRepository.findAll());
		
			return "result";
        }else{return "greeting";}

	}
    

    //part for mysql 
    @Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	//ruins here, nothing useful
	/*@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String author, @RequestParam String title, @RequestParam String journal
			, @RequestParam Integer year) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
		n.setAuthor(author);
		n.setTitle(title);
		n.setYear(year);
		n.setJournal(journal);
		userRepository.save(n);
		return "Saved";
	}*/

	/*@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}*/
    
    

}
